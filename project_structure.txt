--- 📁 Project Structure ---

/
├── .github/
│   └── workflows/
│   │   └── release.yml
├── folder_ignore_test/
│   └── dont_ignore.txt
├── .generatetreeignore
├── .gitignore
├── CHANGELOG.md
├── DEVELOPER_GUIDE.md
├── generate_tree.sh
├── LICENSE
├── project_structure.txt
└── README.md

--- 📄 File Contents ---

--- File: .generatetreeignore ---

ignore_test.txt
folder_ignore_test/ignore.txt
*.log

--- File: .github/workflows/release.yml ---

name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "Release notes for version ${{ github.ref_name }}"
          draft: false
          prerelease: false


--- File: .gitignore ---

node_modules/

--- File: CHANGELOG.md ---

# Changelog

All notable changes to this project will be documented in this file.

This format follows the guidelines of [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/).

## [1.0.0] - 2024-12-23

### Added

- **Directory Tree Generation**:

  - `generate_tree_structure` function to create a hierarchical view of the project.
  - Support for ignored files and folders specified in `.gitignore`.
  - `--print-content` option to include file contents in the output report.
  - Support for a new `.generatetreeignore` file for custom file/directory exclusion.
  - **Debug Mode**: Added a `--debug` flag to enable detailed script execution messages.

- **Ignored File Loading**:

  - `load_ignore_patterns` function to process exclusion patterns from `.gitignore` and `.generatetreeignore`.

- **File Export**:

  - Automatic generation of the `project_structure.txt` file containing the directory structure.
  - Optional inclusion of file contents in the output file.

- **Documentation**:
  - Added a developer guide detailing the workings of the `generate_tree.sh` script.

### Changed

- Updated exclusion logic to handle combined ignore patterns from `.gitignore` and `.generatetreeignore`.

### Fixed

- Error handling when attempting to read files without permission.
- Fixed issues with files and directories that include special characters in their names.
- Resolved an issue where files specified in `.generatetreeignore` were not always being ignored due to incorrect path separator handling. Forward slashes (`/`) are now correctly interpreted as path separators.

---

## [0.1.0] - 2024-12-20

### Added

- Initial project structure:
  - `generate_tree.sh` script to generate the basic directory structure.
  - Support for `.gitignore` to exclude specific files and directories.

---

## Upcoming Changes

### Planned

- Add support for multiple output formats, such as JSON and Markdown.
- Improve performance when processing large volumes of files.
- Create automated tests to validate all script functionalities.


--- File: DEVELOPER_GUIDE.md ---

# Developer Guide - Directory Tree Generator

This document provides an in-depth explanation of how the `generate_tree.sh` script works. It is a Bash script that generates a directory tree structure of a project, while ignoring files and folders listed in the `.gitignore` file or an additional `.generatetreeignore` file. Additionally, the script can include the contents of each listed file in the output when the `--print-content` parameter is provided, and now includes a debug mode activated by the `--debug` parameter.

---

## How the Script Works

### 1. **Loading Exclusion Patterns**

The script supports two sources of exclusion patterns:

- `.gitignore`: The file used by Git to ignore files and directories.
- `.generatetreeignore`: A custom file that allows additional patterns specific to this script.

The `load_ignore_patterns` function is responsible for reading both files and consolidating the exclusion patterns.

```bash
load_ignore_patterns() {
  local ignore_files=(".gitignore" ".generatetreeignore")
  ignored_patterns=()

  for ignore_file in "${ignore_files[@]}"; do
    if [[ -f "$ignore_file" ]]; then
      while IFS= read -r line || [[ -n "$line" ]]; do
        line="${line%%#*}" && line=$(echo "$line" | xargs)
        [[ -n "$line" ]] && ignored_patterns+=("$line")
      done < "$ignore_file"
    fi
  done

  debug_echo "DEBUG: Loaded ignore patterns: ${ignored_patterns[@]}"
}
```

#### What the code does:

- **Reads both files**: The function iterates through `.gitignore` and `.generatetreeignore` files.
- **Filters valid patterns**: Lines that are comments or empty are ignored. Valid patterns are added to the `ignored_patterns` array.
- **Combines patterns**: Patterns from both files are combined into a single list.
- **Debug Output**: When debug mode is enabled, the loaded ignore patterns are printed to the console.

---

### 2. **Checking if an Entry Should Be Ignored**

The `is_ignored` function determines whether a given file or directory matches any of the exclusion patterns.

```bash
is_ignored() {
  local entry="$1"
  [[ -d "$entry" ]] && entry="${entry%/}/"

  debug_echo "DEBUG: Checking if '$entry' is ignored..."
  for pattern in "${ignored_patterns[@]}"; do
    debug_echo "DEBUG:   Comparing with pattern: '$pattern'"
    if [[ "$entry" == "$pattern" || "$entry" == */"$pattern" || "$entry" == "$pattern"* || "$entry" == /*"$pattern" ]]; then
      debug_echo "DEBUG:     '$entry' matches pattern '$pattern'. Ignoring."
      return 0
    fi
  done
  debug_echo "DEBUG:     '$entry' is not ignored."
  return 1
}
```

#### What the code does:

- **Handles directories**: Ensures directory paths are formatted with a trailing slash for matching.
- **Matches patterns**: Checks if the entry matches any pattern in the `ignored_patterns` list.
  - If a match is found, the function returns `0` (indicating the entry is ignored).
  - If no match is found, it returns `1`.
- **Debug Output**: When debug mode is enabled, the function prints messages indicating which entry is being checked and the patterns it's being compared against.

---

### 3. **Generating the Directory Tree Structure**

The `generate_tree_structure` function creates a hierarchical representation of the directory structure, excluding ignored files and directories.

```bash
generate_tree_structure() {
  local dir="$1"
  local indent="$2"
  local entries
  local dirs=()
  local files=()

  entries=("$dir"/* "$dir"/.*)

  for entry in "${entries[@]}"; do
    [[ ! -e "$entry" ]] && continue
    local relative_path="${entry#./}"

    debug_echo "DEBUG: Checking entry: '$relative_path'"
    is_ignored "$relative_path" && continue

    [[ -d "$entry" ]] && dirs+=("$entry") || files+=("$entry")
  done

  IFS=$'\n' dirs=($(sort <<<"${dirs[*]}"))
  IFS=$'\n' files=($(sort <<<"${files[*]}"))
  unset IFS

  local total=${#dirs[@]}+${#files[@]}
  for i in "${!dirs[@]}"; do
    local name=$(basename "${dirs[$i]}")
    local prefix="├── "
    [[ $((i + 1)) -eq $total ]] && prefix="└── "
    echo "${indent}${prefix}${name}/"
    generate_tree_structure "${dirs[$i]}" "${indent}│   "
  done

  for i in "${!files[@]}"; do
    local name=$(basename "${files[$i]}")
    local prefix="├── "
    [[ $((i + 1 + ${#dirs[@]})) -eq $total ]] && prefix="└── "
    echo "${indent}${prefix}${name}"
  done
}
```

#### What the code does:

- **Lists files and directories**: The script gathers all visible and hidden entries in the current directory.
- **Filters ignored entries**: Before processing each entry, it checks if it matches any exclusion pattern using the `is_ignored` function.
- **Generates a tree structure**: For each directory and file that is not ignored, the function prints a structured representation with appropriate symbols (`├──`, `└──`).
- **Debug Output**: When debug mode is enabled, the function prints messages indicating which entry is being checked for exclusion.

---

### 4. **Generating File Contents (Optional)**

The `generate_file_contents` function appends the contents of each file in the directory structure to the output file, if the `--print-content` option is enabled.

```bash
generate_file_contents() {
  local output_file="$1"
  echo "" >>"$output_file"
  echo "--- 📄 File Contents ---" >>"$output_file"
  echo "" >>"$output_file"

  while IFS= read -r file; do
    [[ -d "$file" ]] && continue
    local relative_file="${file#./}"

    if ! is_ignored "$relative_file"; then
      echo "--- File: $relative_file ---" >>"$output_file"
      echo "" >>"$output_file"
      cat "$file" >>"$output_file" 2>/dev/null || echo "[Error reading file]" >>"$output_file"
      echo "" >>"$output_file"
      echo "" >>"$output_file"
    fi
  done < <(find . -type f ! -path "./.git/*")
}
```

#### What the code does:

- **Iterates through files**: Identifies all files in the project directory.
- **Filters ignored entries**: Before processing each file, it checks if it matches any exclusion pattern using the `is_ignored` function.
- **Appends file contents**: For each non-ignored file, its contents are appended to the output file. Errors (e.g., permission issues) are logged as `[Error reading file]`.

---

### 5. **Writing the Structure to the Output File**

The `write_tree_to_file` function creates and writes the generated directory tree structure to the `project_structure.txt` file.

```bash
write_tree_to_file() {
  local output_file="$1"
  > "$output_file"
  echo "--- 📁 Project Structure ---" >>"$output_file"
  echo '' >>"$output_file"
  echo "/" >>"$output_file"
  generate_tree_structure "." "" >> "$output_file"
}
```

#### What the code does:

- **Creates or clears the output file**: Ensures the output file starts empty.
- **Writes the directory structure**: Appends the generated tree structure to the output file.

---

### 6. **Main Execution**

The `main` function orchestrates the script's execution by calling the necessary functions based on the provided arguments.

```bash
main() {
  local print_content=false
  local DEBUG_MODE=false
  local args=("$@")

  # Process arguments
  for arg in "${args[@]}"; do
    case "$arg" in
      "--print-content")
        print_content=true
        ;;
      "--debug")
        DEBUG_MODE=true
        ;;
      *)
        echo "Unknown argument: $arg"
        exit 1
        ;;
    esac
  done

  # Set the global DEBUG_MODE variable
  export DEBUG_MODE

  load_ignore_patterns
  write_tree_to_file "project_structure.txt"

  if [[ "$print_content" == true ]]; then
    generate_file_contents "project_structure.txt"
  fi
}

main "$@"
```

#### What the code does:

- **Processes arguments**: Checks if the `--print-content` and `--debug` flags are provided.
- **Sets Debug Mode**: The `DEBUG_MODE` variable is set based on the presence of the `--debug` flag and exported to be accessible by other functions.
- **Loads exclusion patterns**: Reads patterns from `.gitignore` and `.generatetreeignore`.
- **Generates and writes the tree structure**: Calls the functions to generate and save the directory tree.
- **Appends file contents (optional)**: If the `--print-content` flag is enabled, appends the contents of each file to the output.

---

## New Functionality: Debug Mode

The script now includes a debug mode that can be enabled using the `--debug` parameter. This mode provides detailed output about the script's execution, which can be helpful for understanding how the script is processing files and ignore patterns.

### Enabling Debug Mode

To enable debug mode, simply include the `--debug` parameter when running the script:

```bash
./generate_tree.sh --debug
```

You can also combine it with other parameters:

```bash
./generate_tree.sh --print-content --debug
```

### Debug Output

When debug mode is enabled, the script will print the following information to the console:

- **Loaded ignore patterns**: Displays the list of patterns loaded from `.gitignore` and `.generatetreeignore`.
- **File exclusion checks**: Shows each file and directory being checked against the ignore patterns, and whether it is being ignored or not.
- **Pattern matching**: Indicates which specific ignore pattern matched a given file or directory, if a match occurs.

### `DEBUG_MODE` Variable and `debug_echo` Function

- **`DEBUG_MODE`**: This global variable (set in the `main` function based on the `--debug` argument) controls whether debug messages are displayed.
- **`debug_echo()`**: This helper function is used throughout the script to print debug messages. It only outputs its arguments if the `DEBUG_MODE` variable is set to `true`.

```bash
# Global variable for debug mode
DEBUG_MODE=false

# Function to echo debug messages only when DEBUG_MODE is true
debug_echo() {
  if [[ "$DEBUG_MODE" == true ]]; then
    echo "$@"
  fi
}
```

By using this structure, debug messages can be easily added or removed from the script by simply calling `debug_echo` instead of `echo` directly.

This new functionality provides developers with a valuable tool for understanding and troubleshooting the script's behavior.


--- File: folder_ignore_test/dont_ignore.txt ---

Just a file to test the logic of the .generatetreeignore file.

--- File: generate_tree.sh ---

#!/bin/bash

# Global variable for debug mode
DEBUG_MODE=false

# Function to echo debug messages only when DEBUG_MODE is true
debug_echo() {
  if [[ "$DEBUG_MODE" == true ]]; then
    echo "$@"
  fi
}

# Loads the exclusion patterns from .gitignore and .generatetreeignore (if exists)
load_ignore_patterns() {
  local gitignore_file=".gitignore"
  local generatetreeignore_file=".generatetreeignore"
  ignored_patterns=()

  # Always ignore the .git/ folder
  ignored_patterns+=(".git/")

  # Load patterns from .gitignore
  if [[ -f "$gitignore_file" ]]; then
    while IFS= read -r line || [[ -n "$line" ]]; do
      # Remove comments and extra spaces
      line="${line%%#*}" && line=$(echo "$line" | xargs)
      [[ -n "$line" ]] && ignored_patterns+=("$line")
    done <"$gitignore_file"
  fi

  # Load patterns from .generatetreeignore (if exists)
  if [[ -f "$generatetreeignore_file" ]]; then
    while IFS= read -r line || [[ -n "$line" ]]; do
      # Remove comments and extra spaces
      line="${line%%#*}" && line=$(echo "$line" | xargs)
      [[ -n "$line" ]] && ignored_patterns+=("$line")
    done <"$generatetreeignore_file"
  fi

  debug_echo "DEBUG: Loaded ignore patterns: ${ignored_patterns[@]}"
}

# Checks if an entry should be ignored
is_ignored() {
  local entry="$1"

  # Adds a trailing slash for directories
  [[ -d "$entry" ]] && entry="${entry%/}/"

  debug_echo "DEBUG: Checking if '$entry' is ignored..."
  for pattern in "${ignored_patterns[@]}"; do
    debug_echo "DEBUG:   Comparing with pattern: '$pattern'"
    # Use pattern matching with wildcards. Also check against patterns that are relative from root with leading '/' to allow for .generatetreeignore path specification
    if [[ "$entry" == $pattern ]] || [[ "$entry" == */"$pattern" ]] || [[ "$entry" == "$pattern"* ]] || [[ "$entry" == /*"$pattern" ]]; then
      debug_echo "DEBUG:     '$entry' matches pattern '$pattern'. Ignoring."
      return 0
    fi
  done
  debug_echo "DEBUG:     '$entry' is not ignored."
  return 1
}

# Generates the structure of a folder
generate_tree_structure() {
  local dir="$1"
  local indent="$2"
  local entries
  local dirs=()
  local files=()

  # Lists the items in the current directory, including hidden ones
  entries=("$dir"/* "$dir"/.*)

  for entry in "${entries[@]}"; do
    [[ ! -e "$entry" ]] && continue
    local relative_path="${entry#./}"

    debug_echo "DEBUG: Checking entry: '$relative_path'"
    # Ignore entries as per .gitignore and .generatetreeignore
    is_ignored "$relative_path" && continue

    # Classifies into directories and files
    [[ -d "$entry" ]] && dirs+=("$entry") || files+=("$entry")
  done

  # Sort directories and files
  IFS=$'\n' dirs=($(sort <<<"${dirs[*]}"))
  IFS=$'\n' files=($(sort <<<"${files[*]}"))
  unset IFS

  # Print directories first
  local total=${#dirs[@]}+${#files[@]}
  for i in "${!dirs[@]}"; do
    local name=$(basename "${dirs[$i]}")
    local prefix="├── "
    [[ $((i + 1)) -eq $total ]] && prefix="└── "
    echo "${indent}${prefix}${name}/"
    generate_tree_structure "${dirs[$i]}" "${indent}│   "
  done

  # Then print files
  for i in "${!files[@]}"; do
    local name=$(basename "${files[$i]}")
    local prefix="├── "
    [[ $((i + 1 + ${#dirs[@]})) -eq $total ]] && prefix="└── "
    echo "${indent}${prefix}${name}"
  done
}

# Writes the structure to the output file
write_tree_to_file() {
  local output_file="$1"
  >"$output_file"
  echo "--- 📁 Project Structure ---" >>"$output_file"
  echo '' >>"$output_file" # Add blank line for better readability
  echo "/" >>"$output_file"
  generate_tree_structure "." "" >>"$output_file"
}

# Generates the file contents section
generate_file_contents() {
  local output_file="$1"
  echo "" >>"$output_file"
  echo "--- 📄 File Contents ---" >>"$output_file"
  echo "" >>"$output_file"

  # Iterate over the files, excluding ignored ones
  find . -type f ! -path "./.git/*" | while IFS= read -r file; do
    # Remove leading './' for consistency
    local relative_file="${file#./}"

    # Check if the file or its directory should be ignored
    if ! is_ignored "$relative_file"; then
      echo "--- File: $relative_file ---" >>"$output_file"
      echo "" >>"$output_file"
      cat "$file" >>"$output_file" 2>/dev/null || echo "[Error reading file]" >>"$output_file"
      echo "" >>"$output_file"
      echo "" >>"$output_file"
    fi
  done
}

# Main execution
main() {
  local print_content=false
  local args=("$@")

  # Process arguments
  for arg in "${args[@]}"; do
    case "$arg" in
    "--print-content")
      print_content=true
      ;;
    "--debug")
      DEBUG_MODE=true
      ;;
    *)
      echo "Unknown argument: $arg"
      exit 1
      ;;
    esac
  done

  # Generate the tree structure
  load_ignore_patterns
  write_tree_to_file "project_structure.txt"

  # If "--print-content" was passed, generate file contents
  if [[ "$print_content" == true ]]; then
    generate_file_contents "project_structure.txt"
  fi
}

main "$@"


--- File: LICENSE ---

MIT License

Copyright (c) 2024 Caíque Gaspar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- File: project_structure.txt ---

[Error reading file]


--- File: README.md ---

# Directory Tree Generator

This is a Bash script that generates a directory tree structure of a project, similar to the `tree` command, but with enhanced functionality. It respects files and directories listed in `.gitignore` and `.generatetreeignore`. The generated structure is saved in a file called `project_structure.txt`. Additionally, you can optionally include the contents of the listed files in the output and enable a debug mode for detailed script execution.

## Download

You can download directly using the link below:

- [Download File](https://github.com/caiquegaspar/directory-tree-generator/releases/download/v1.0.0/generate_tree.sh)

## Features

- **Ignores files and directories**: Respects patterns specified in `.gitignore` and `.generatetreeignore`.
- **Custom ignore rules**: Allows additional exclusion rules via `.generatetreeignore`.
- **Generates directory tree**: Creates a hierarchical directory structure.
- **Output to file**: Saves the generated structure to `project_structure.txt`.
- **File contents (optional)**: Includes the contents of each file in the directory structure with the `--print-content` parameter.
- **Debug mode (optional)**: Provides detailed script execution messages using the `--debug` parameter.

## How to Use

### Prerequisites

- Bash environment (Linux, macOS, or Git Bash on Windows).
- A `.gitignore` or `.generatetreeignore` file to define ignored files and directories (optional).

### Steps

1. Place the `generate_tree.sh` script in the root directory of your project.
2. Run the script:

   ```bash
   chmod +x generate_tree.sh

   ./generate_tree.sh
   ```

3. The generated structure will be saved in `project_structure.txt`.

   - To include file contents, use the `--print-content` argument:

     ```bash
     ./generate_tree.sh --print-content
     ```

   - To enable debug mode and see detailed script execution messages, use the `--debug` argument:

     ```bash
     ./generate_tree.sh --debug
     ```

   - You can combine both `--print-content` and `--debug` arguments. The order does not matter:

     ```bash
     ./generate_tree.sh --print-content --debug
     ```

     or

     ```bash
     ./generate_tree.sh --debug --print-content
     ```

### Using `.generatetreeignore`

To add custom exclusions beyond `.gitignore`, create a `.generatetreeignore` file in the root of your project. The syntax is the same as `.gitignore`.

#### Example `.generatetreeignore` File:

```bash
# Ignore all `.log` files
*.log

# Ignore specific folders
/temp/
```

Patterns in `.generatetreeignore` will be processed in addition to `.gitignore`.

### Example Output

#### Without `--print-content` and `--debug`

The `project_structure.txt` file will contain a directory structure similar to:

```
--- 📁 Project Structure ---

/
├── .github/
│   └── workflows/
│       └── docker-image.yml
├── docker/
│   ├── Dockerfile
│   └── start.sh
├── prisma/
│   ├── migrations/
│   │   └── 0001_initial/
│   │   │   └── migration.sql
│   └── schema.prisma
...
```

#### With `--print-content`

Running the script with `--print-content` will append the contents of each file listed in the structure:

```
--- 📁 Project Structure ---

/
├── .github/
│   └── workflows/
│       └── docker-image.yml
├── docker/
│   ├── Dockerfile
│   └── start.sh
├── prisma/
│   ├── migrations/
│   │   └── 0001_initial/
│   │   │   └── migration.sql
│   └── schema.prisma
...

--- 📄 File Contents ---

--- File: .github/workflows/docker-image.yml ---

name: Docker Image CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker buildx build --file docker/Dockerfile --tag my-project-image:${{ github.sha }} --tag my-project-image:latest --load .
```

#### With `--debug`

Running the script with `--debug` will output detailed messages about the script's execution in your terminal, such as loaded ignore patterns and file matching processes. This output will appear alongside the regular output unless redirected.

### How It Works

1. **Loading Ignore Patterns**:

   - Loads exclusion patterns from `.gitignore` and `.generatetreeignore`.
   - Combines patterns from both files for a unified exclusion list.

2. **Exclusion Check**:

   - Each file and directory is checked against the combined list of patterns to determine if it should be ignored.

3. **Generating the Directory Tree**:

   - Recursively scans the directory structure to create a hierarchical tree.

4. **Saving the Output**:

   - The directory tree is saved in `project_structure.txt`.

5. **Including File Contents (Optional)**:

   - If `--print-content` is specified, the contents of non-ignored files are appended to the output.

6. **Debug Mode (Optional)**:
   - If `--debug` is specified, detailed messages about the script's execution are printed to the console.

## Contributing

Contributions are welcome! Feel free to open an issue or submit a pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.


