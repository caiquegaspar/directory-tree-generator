--- üìÅ Project Structure ---

/
‚îú‚îÄ‚îÄ .generatetreeignore
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ DEVELOPER_GUIDE.md
‚îú‚îÄ‚îÄ generate_tree.sh
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ project_structure.txt
‚îî‚îÄ‚îÄ README.md

--- üìÑ File Contents ---

--- File: .generatetreeignore ---

ignore_test.txt

--- File: .gitignore ---

node_modules/

--- File: DEVELOPER_GUIDE.md ---

# Developer Guide - Directory Tree Generator

This document provides an in-depth explanation of how the `generate_tree.sh` script works. It is a Bash script that generates a directory tree structure of a project, while ignoring files and folders listed in the `.gitignore` file or an additional `.generatetreeignore` file. Additionally, the script can include the contents of each listed file in the output when the `--print-content` parameter is provided.

---

## How the Script Works

### 1. **Loading Exclusion Patterns**

The script supports two sources of exclusion patterns:

- `.gitignore`: The file used by Git to ignore files and directories.
- `.generatetreeignore`: A custom file that allows additional patterns specific to this script.

The `load_ignore_patterns` function is responsible for reading both files and consolidating the exclusion patterns.

```bash
load_ignore_patterns() {
  local ignore_files=(".gitignore" ".generatetreeignore")
  ignored_patterns=()

  for ignore_file in "${ignore_files[@]}"; do
    if [[ -f "$ignore_file" ]]; then
      while IFS= read -r line || [[ -n "$line" ]]; do
        line="${line%%#*}" && line=$(echo "$line" | xargs)
        [[ -n "$line" ]] && ignored_patterns+=("$line")
      done < "$ignore_file"
    fi
  done
}
```

#### What the code does:

- **Reads both files**: The function iterates through `.gitignore` and `.generatetreeignore` files.
- **Filters valid patterns**: Lines that are comments or empty are ignored. Valid patterns are added to the `ignored_patterns` array.
- **Combines patterns**: Patterns from both files are combined into a single list.

---

### 2. **Checking if an Entry Should Be Ignored**

The `is_ignored` function determines whether a given file or directory matches any of the exclusion patterns.

```bash
is_ignored() {
  local entry="$1"
  [[ -d "$entry" ]] && entry="${entry%/}/"

  for pattern in "${ignored_patterns[@]}"; do
    if [[ "$entry" == $pattern || "$entry" == */"$pattern" || "$entry" == "$pattern"* ]]; then
      return 0
    fi
  done
  return 1
}
```

#### What the code does:

- **Handles directories**: Ensures directory paths are formatted with a trailing slash for matching.
- **Matches patterns**: Checks if the entry matches any pattern in the `ignored_patterns` list.
  - If a match is found, the function returns `0` (indicating the entry is ignored).
  - If no match is found, it returns `1`.

---

### 3. **Generating the Directory Tree Structure**

The `generate_tree_structure` function creates a hierarchical representation of the directory structure, excluding ignored files and directories.

```bash
generate_tree_structure() {
  local dir="$1"
  local indent="$2"
  local entries
  local dirs=()
  local files=()

  entries=("$dir"/* "$dir"/.*)

  for entry in "${entries[@]}"; do
    [[ ! -e "$entry" ]] && continue
    local relative_path="${entry#./}"

    is_ignored "$relative_path" && continue

    [[ -d "$entry" ]] && dirs+=("$entry") || files+=("$entry")
  done

  IFS=$'\n' dirs=($(sort <<<"${dirs[*]}"))
  IFS=$'\n' files=($(sort <<<"${files[*]}"))
  unset IFS

  local total=${#dirs[@]}+${#files[@]}
  for i in "${!dirs[@]}"; do
    local name=$(basename "${dirs[$i]}")
    local prefix="‚îú‚îÄ‚îÄ "
    [[ $((i + 1)) -eq $total ]] && prefix="‚îî‚îÄ‚îÄ "
    echo "${indent}${prefix}${name}/"
    generate_tree_structure "${dirs[$i]}" "${indent}‚îÇ   "
  done

  for i in "${!files[@]}"; do
    local name=$(basename "${files[$i]}")
    local prefix="‚îú‚îÄ‚îÄ "
    [[ $((i + 1 + ${#dirs[@]})) -eq $total ]] && prefix="‚îî‚îÄ‚îÄ "
    echo "${indent}${prefix}${name}"
  done
}
```

#### What the code does:

- **Lists files and directories**: The script gathers all visible and hidden entries in the current directory.
- **Filters ignored entries**: Before processing each entry, it checks if it matches any exclusion pattern.
- **Generates a tree structure**: For each directory and file, the function prints a structured representation with appropriate symbols (`‚îú‚îÄ‚îÄ`, `‚îî‚îÄ‚îÄ`).

---

### 4. **Generating File Contents (Optional)**

The `generate_file_contents` function appends the contents of each file in the directory structure to the output file, if the `--print-content` option is enabled.

```bash
generate_file_contents() {
  local output_file="$1"
  echo "" >>"$output_file"
  echo "--- üìÑ File Contents ---" >>"$output_file"
  echo "" >>"$output_file"

  while IFS= read -r file; do
    [[ -d "$file" ]] && continue

    echo "--- File: $file ---" >>"$output_file"
    echo "" >>"$output_file"
    cat "$file" >>"$output_file" 2>/dev/null || echo "[Error reading file]" >>"$output_file"
    echo "" >>"$output_file"
  done < <(find . -type f ! -path "./.git/*")
}
```

#### What the code does:

- **Iterates through files**: Identifies all files in the project directory.
- **Appends file contents**: For each file, its contents are appended to the output file. Errors (e.g., permission issues) are logged as `[Error reading file]`.

---

### 5. **Writing the Structure to the Output File**

The `write_tree_to_file` function creates and writes the generated directory tree structure to the `project_structure.txt` file.

```bash
write_tree_to_file() {
  local output_file="$1"
  > "$output_file"
  echo "/" >> "$output_file"
  generate_tree_structure "." "" >> "$output_file"
}
```

#### What the code does:

- **Creates or clears the output file**: Ensures the output file starts empty.
- **Writes the directory structure**: Appends the generated tree structure to the output file.

---

### 6. **Main Execution**

The `main` function orchestrates the script's execution by calling the necessary functions based on the provided arguments.

```bash
main() {
  local print_content=false

  if [[ "$1" == "--print-content" ]]; then
    print_content=true
    shift
  fi

  load_ignore_patterns
  write_tree_to_file "project_structure.txt"

  if [[ "$print_content" == true ]]; then
    generate_file_contents "project_structure.txt"
  fi
}

main "$@"
```

#### What the code does:

- **Processes arguments**: Checks if the `--print-content` flag is provided.
- **Loads exclusion patterns**: Reads patterns from `.gitignore` and `.generatetreeignore`.
- **Generates and writes the tree structure**: Calls the functions to generate and save the directory tree.
- **Appends file contents (optional)**: If the `--print-content` flag is enabled, appends the contents of each file to the output.

---

## New Functionality: `.generatetreeignore`

The `.generatetreeignore` file is a new addition that allows users to define exclusion patterns specific to this script, without affecting the `.gitignore` file.

### Key Features:

- **Custom patterns**: Define patterns for files and directories to be excluded from the generated tree, independently of `.gitignore`.
- **Priority**: Patterns from `.generatetreeignore` are combined with `.gitignore` patterns, but they do not override `.gitignore`.

---

### Example `.generatetreeignore` File:

```plaintext
node_modules/
dist/
*.log
*.tmp
```

In this example:

- `node_modules/` and `dist/` directories will be ignored.
- Files with `.log` or `.tmp` extensions will also be excluded.

---

### Summary of Changes

- The script now reads and incorporates patterns from `.generatetreeignore`.
- Users can customize exclusions for tree generation without modifying `.gitignore`.

This new functionality ensures flexibility while maintaining compatibility with existing `.gitignore` configurations.


--- File: generate_tree.sh ---

#!/bin/bash

# Loads the exclusion patterns from .gitignore and .generatetreeignore (if exists)
load_ignore_patterns() {
  local gitignore_file=".gitignore"
  local generatetreeignore_file=".generatetreeignore"
  ignored_patterns=()

  # Always ignore the .git/ folder
  ignored_patterns+=(".git/")

  # Load patterns from .gitignore
  if [[ -f "$gitignore_file" ]]; then
    while IFS= read -r line || [[ -n "$line" ]]; do
      # Remove comments and extra spaces
      line="${line%%#*}" && line=$(echo "$line" | xargs)
      [[ -n "$line" ]] && ignored_patterns+=("$line")
    done <"$gitignore_file"
  fi

  # Load patterns from .generatetreeignore (if exists)
  if [[ -f "$generatetreeignore_file" ]]; then
    while IFS= read -r line || [[ -n "$line" ]]; do
      # Remove comments and extra spaces
      line="${line%%#*}" && line=$(echo "$line" | xargs)
      [[ -n "$line" ]] && ignored_patterns+=("$line")
    done <"$generatetreeignore_file"
  fi
}

# Checks if an entry should be ignored
is_ignored() {
  local entry="$1"

  # Adds a trailing slash for directories
  [[ -d "$entry" ]] && entry="${entry%/}/"

  for pattern in "${ignored_patterns[@]}"; do
    # Uses fnmatch for pattern matching, such as *.log
    if [[ "$entry" == $pattern || "$entry" == */"$pattern" || "$entry" == "$pattern"* ]]; then
      return 0
    fi
  done
  return 1
}

# Generates the structure of a folder
generate_tree_structure() {
  local dir="$1"
  local indent="$2"
  local entries
  local dirs=()
  local files=()

  # Lists the items in the current directory, including hidden ones
  entries=("$dir"/* "$dir"/.*)

  for entry in "${entries[@]}"; do
    [[ ! -e "$entry" ]] && continue
    local relative_path="${entry#./}"

    # Ignore entries as per .gitignore and .generatetreeignore
    is_ignored "$relative_path" && continue

    # Classifies into directories and files
    [[ -d "$entry" ]] && dirs+=("$entry") || files+=("$entry")
  done

  # Sort directories and files
  IFS=$'\n' dirs=($(sort <<<"${dirs[*]}"))
  IFS=$'\n' files=($(sort <<<"${files[*]}"))
  unset IFS

  # Print directories first
  local total=${#dirs[@]}+${#files[@]}
  for i in "${!dirs[@]}"; do
    local name=$(basename "${dirs[$i]}")
    local prefix="‚îú‚îÄ‚îÄ "
    [[ $((i + 1)) -eq $total ]] && prefix="‚îî‚îÄ‚îÄ "
    echo "${indent}${prefix}${name}/"
    generate_tree_structure "${dirs[$i]}" "${indent}‚îÇ   "
  done

  # Then print files
  for i in "${!files[@]}"; do
    local name=$(basename "${files[$i]}")
    local prefix="‚îú‚îÄ‚îÄ "
    [[ $((i + 1 + ${#dirs[@]})) -eq $total ]] && prefix="‚îî‚îÄ‚îÄ "
    echo "${indent}${prefix}${name}"
  done
}

# Writes the structure to the output file
write_tree_to_file() {
  local output_file="$1"
  >"$output_file"
  echo "--- üìÅ Project Structure ---" >>"$output_file"
  echo '' >>"$output_file" # Add blank line for better readability
  echo "/" >>"$output_file"
  generate_tree_structure "." "" >>"$output_file"
}

# Generates the file contents section
generate_file_contents() {
  local output_file="$1"
  echo "" >>"$output_file"
  echo "--- üìÑ File Contents ---" >>"$output_file"
  echo "" >>"$output_file"

  # Iterate over the files, excluding ignored ones
  find . -type f ! -path "./.git/*" | while IFS= read -r file; do
    # Remove leading './' for consistency
    local relative_file="${file#./}"

    # Check if the file or its directory should be ignored
    is_ignored "$relative_file" && continue

    echo "--- File: $relative_file ---" >>"$output_file"
    echo "" >>"$output_file"
    cat "$file" >>"$output_file" 2>/dev/null || echo "[Error reading file]" >>"$output_file"
    echo "" >>"$output_file"
    echo "" >>"$output_file"
  done
}

# Main execution
main() {
  local print_content=false

  # Check for "--print-content" parameter
  if [[ "$1" == "--print-content" ]]; then
    print_content=true
    shift # Remove the --print-content argument
  fi

  # Generate the tree structure
  load_ignore_patterns
  write_tree_to_file "project_structure.txt"

  # If "--print-content" was passed, generate file contents
  if [[ "$print_content" == true ]]; then
    generate_file_contents "project_structure.txt"
  fi
}

main "$@"


--- File: LICENSE ---

MIT License

Copyright (c) 2024 Ca√≠que Gaspar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- File: project_structure.txt ---

[Error reading file]


--- File: README.md ---

# Directory Tree Generator

This is a Bash script that generates a directory tree structure of a project, similar to the `tree` command, but with enhanced functionality. It respects files and directories listed in `.gitignore` and `.generatetreeignore`. The generated structure is saved in a file called `project_structure.txt`. Additionally, you can optionally include the contents of the listed files in the output.

## Features

- **Ignores files and directories**: Respects patterns specified in `.gitignore` and `.generatetreeignore`.
- **Custom ignore rules**: Allows additional exclusion rules via `.generatetreeignore`.
- **Generates directory tree**: Creates a hierarchical directory structure.
- **Output to file**: Saves the generated structure to `project_structure.txt`.
- **File contents (optional)**: Includes the contents of each file in the directory structure with the `--print-content` parameter.

## How to Use

### Prerequisites

- Bash environment (Linux, macOS, or Git Bash on Windows).
- A `.gitignore` or `.generatetreeignore` file to define ignored files and directories (optional).

### Steps

1. Place the `generate_tree.sh` script in the root directory of your project.
2. Run the script:

   ```bash
   chmod +x generate_tree.sh

   ./generate_tree.sh
   ```

3. The generated structure will be saved in `project_structure.txt`. To include file contents, use the `--print-content` argument:

   ```bash
   ./generate_tree.sh --print-content
   ```

### Using `.generatetreeignore`

To add custom exclusions beyond `.gitignore`, create a `.generatetreeignore` file in the root of your project. The syntax is the same as `.gitignore`.

#### Example `.generatetreeignore` File:

```bash
# Ignore all `.log` files
*.log

# Ignore specific folders
/temp/
```

Patterns in `.generatetreeignore` will be processed in addition to `.gitignore`.

### Example Output

#### Without `--print-content`

The `project_structure.txt` file will contain a directory structure similar to:

```
--- üìÅ Project Structure ---

/
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ docker-image.yml
‚îú‚îÄ‚îÄ docker/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ start.sh
‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ 0001_initial/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ migration.sql
‚îÇ   ‚îî‚îÄ‚îÄ schema.prisma
...
```

#### With `--print-content`

Running the script with `--print-content` will append the contents of each file listed in the structure:

```
--- üìÅ Project Structure ---

/
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ docker-image.yml
‚îú‚îÄ‚îÄ docker/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ start.sh
‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ 0001_initial/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ migration.sql
‚îÇ   ‚îî‚îÄ‚îÄ schema.prisma
...

--- üìÑ File Contents ---

--- File: .github/workflows/docker-image.yml ---

name: Docker Image CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker buildx build --file docker/Dockerfile --tag my-project-image:${{ github.sha }} --tag my-project-image:latest --load .
```

## How It Works

1. **Loading Ignore Patterns**:

   - Loads exclusion patterns from `.gitignore` and `.generatetreeignore`.
   - Combines patterns from both files for a unified exclusion list.

2. **Exclusion Check**:

   - Each file and directory is checked against the combined list of patterns to determine if it should be ignored.

3. **Generating the Directory Tree**:

   - Recursively scans the directory structure to create a hierarchical tree.

4. **Saving the Output**:

   - The directory tree is saved in `project_structure.txt`.

5. **Including File Contents (Optional)**:
   - If `--print-content` is specified, the contents of non-ignored files are appended to the output.

## Contributing

Contributions are welcome! Feel free to open an issue or submit a pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.


